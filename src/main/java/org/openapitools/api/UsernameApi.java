/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.UsernamePostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
		date = "2024-03-27T18:23:55.118803+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "username", description = "the username API")
public interface UsernameApi {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	/**
	 * POST /username : Send text to username field
	 * @param usernamePostRequest (required)
	 * @return Successful operation (status code 200) or In case of large text (e.g. 5000
	 * characters), system should handle it through error response or success response (if
	 * it can handle it) (status code 400)
	 */
	@Operation(operationId = "usernamePost", summary = "Send text to username field", responses = {
			@ApiResponse(responseCode = "200", description = "Successful operation",
					content = { @Content(mediaType = "application/json",
							schema = @Schema(implementation = UsernamePostRequest.class)) }),
			@ApiResponse(responseCode = "400",
					description = "In case of large text (e.g. 5000 characters), system should handle it through error response or success response (if it can handle it)",
					content = { @Content(mediaType = "application/json",
							schema = @Schema(implementation = UsernamePostRequest.class)) }) })
	@RequestMapping(method = RequestMethod.POST, value = "/username", produces = { "application/json" },
			consumes = { "application/json" })

	default ResponseEntity<UsernamePostRequest> usernamePost(@Parameter(name = "UsernamePostRequest", description = "",
			required = true) @Valid @RequestBody UsernamePostRequest usernamePostRequest) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					String exampleString = "{ \"text\" : \"text\" }";
					ApiUtil.setExampleResponse(request, "application/json", exampleString);
					break;
				}
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					String exampleString = "{ \"text\" : \"text\" }";
					ApiUtil.setExampleResponse(request, "application/json", exampleString);
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

}
